<?php

/**
 * @file Islandora Item Nominations module.
 */

/**
 * Implements hook_menu().
 */
function islandora_item_nominations_menu() {
  $items = array();
  $items['admin/islandora/tools/nominations'] = array(
    'title' => t('Nominate front page background items'),
    'description' => t('Choose which items to include on the front page rotation'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_item_nominations_front_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'includes/front.form.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 *  Hooks the object properies form.
 *    Checks elegibility of item. Checkbox added if eligible.
 */
function islandora_item_nominations_form_islandora_object_properties_form_alter(&$form, &$form_state) {
  module_load_include('inc', 'islandora_item_nominations', 'includes/utilities');
  $object = $form_state['object'];
  if ($form['pid']['#value'] == 'islandora:sp_remote_resource_collection') {
    return;
  }
  $checkbox = array(
    '#type' => 'checkbox',
    '#title' => t('Nominate as featured item.'),
    '#description' => t('Adds either the JPG or TN (prefers JPG) for this object to a pool of featured items'),
    '#default_value' => is_nominated($form['pid']['#value']) ? TRUE : FALSE,
  );
  $dsid = '';
  // Elegibility defined here:
  if (is_eligible($form['pid']['#value'])) {
    foreach ($object as $datastream) {
      // Must have either a JPG or TN Datastream and is not a collection.
      if ($datastream->id == 'JPG') {
        $form['nominate'] = $checkbox;
      }
      elseif (!isset($object['COLLECTION_POLICY']) && isset($object['TN'])) {
        $form['nominate'] = $checkbox;
      }
    }
  }
  array_unshift($form['#submit'], 'islandora_item_nominations_submit_handler');
  return $form;
}

/**
 * Submit handler to be added to islandora_object_properties_form.
 *
 * @return function $fn
 * Returns utitily function to add or remove items from the database.
 */
function islandora_item_nominations_submit_handler(&$form, &$form_state) {
  if (isset($form['nominate'])) {
    $obj = $form_state['object'];
    // Prefer JPG over TN.
    $dsid = jpg_over_tn($obj);
    $pid = $form_state['values']['pid'];
    if ($form_state['input']['form_id'] == 'islandora_object_properties_form') {
      $fn = $form_state['input']['nominate'] ? 'nominate' : 'denominate';
      $return = $form_state['input']['nominate'] ? $fn($pid, $dsid): $fn($pid);
      return $return;
    }
  }
}

/**
 * Implements hook_islandora_basic_collection_build_manage_object().
 *
 * Allows collection admins to choose candidates for background images.
 */
function islandora_item_nominations_islandora_basic_collection_build_manage_object($form_state, $object) {
  module_load_include('inc', 'islandora_item_nominations', 'includes/collection.form');
  $form_state['manage_collection_object']['nominate'] = array(
    '#id' => 'nominate-children',
    '#group' => 'manage_collection_object',
    '#access' => TRUE,
    '#type' => 'fieldset',
    '#title' => t('Nominated members in this collection'),
    'form' => drupal_get_form('islandora_item_nominations_collection_form', $object),
  );
  return $form_state;
}

/**
 * Implements hook_form_FORM_ID().
 *
 * Allows institution/sub-institution admins to choose candidates for background images.
 */
function islandora_item_nominations_form_admin_form_alter(&$form, &$form_state) {
  module_load_include('inc', 'islandora_item_nominations', 'includes/utilities');
  $form['front'] = array(
    '#type' => 'fieldset',
    '#title' => t("Choose one item as a key image for this institution."),
  );
  // dpm($rows);
  // $default = '';
  // foreach($options as $key => $opt) { 
  //   if($opt['indicator'] == '1'){
  //   $default = $key;
  // }}
  $form['table'] = islandora_item_nominations_table_form($form, $form_state);
  // $headers = array(
  //   'indicator' => array('data' => t('Active'), 'field' => 'n.indicator'),
  //   'pid-link' => array('data' => t('Item pid'), 'field' => 'n.pid'),
  //   'dsid' => array('data' => t('Datastream'), 'field' => 'n.dsid'),
  // );
  // //new table
  // $form['table'] = array(
  //   '#tree' => TRUE,
  //   '#header' => $headers,
  //   '#theme' => 'islandora_item_nominations_table',
  //   'rows' => $rows
  // );

  //old table
  // $form['table'] = array(
  //   '#type' => 'tableselect',
  //   '#title' => t('Nominated item pool'),
  //   '#description' => t("Choose one item to be a featured item for the institution."),
  //   '#header' => $headers,
  //   '#options' => $options,
  //   '#empty' => t("No items added yet, to nominate an object go to the object's manage->properties page"),
  //   '#js_select' => FALSE,
  // );
  $path = drupal_get_path('module', 'islandora_item_nominations') . '/js/islandora_item_nominations.js';
  $form['#attached']['js'][] = array(
    'data' => $path,
    'type' => 'file',
    'scope' => 'footer',
  );
  array_unshift($form['#submit'], 'islandora_namespace_context_add');
  return $form;
}

function islandora_item_nominations_table_form($form, &$form_state) {
  $params = current_path();
  $namespace = explode('/', $params);
  $ns = $namespace[0] . '-';
  $headers = array(
    'indicator' => array('data' => t('Active'), 'field' => 'n.indicator'),
    'pid-link' => array('data' => t('Item pid'), 'field' => 'n.pid'),
    'dsid' => array('data' => t('Datastream'), 'field' => 'n.dsid'),
  );
  $nominated = get_nominated_for_context('namespace', $ns);
  $rows = array();
  foreach ($nominated as $pid => $info) {
    $rows[$pid] = array(
      'selected' => array(
        '#type' => 'checkbox',
        '#default_value' => $info['indicator'],
      ),
      'pid' => array(
        '#markup' => $info['pid-link'],
        ),
       'dsid' => array(
          '#markup' => '<div>' . $info['dsid'] . '</div>',
        ),
    );
  }

  //new table
  return array(
    'table' => array(
      '#tree' => TRUE,
      '#header' => $headers,
      '#theme' => 'islandora_item_nominations_table',
      'rows' => $rows
    ),
  );
}

/**
 * Submit function for namespace homepage item nomination.
 */
function islandora_namespace_context_add(&$form, &$form_state){
  module_load_include('inc', 'islandora_item_nominations', 'includes/utilities');
  foreach ($form_state['input']['table']['rows'] as $pid => $stuff) {
    if($stuff['selected'] == 1){
      $fields = array(
        'context_type' => 'namespace',
        'context_id' => $form['ns']['#value'] . '-'
      );
      if(isset($pid)) {
        // Add pid to namespace context database w/ context id of namespace.
        context_update_context_id($pid, $fields);
      }
    }
  }
}

/**
 * Return the key image for a given context.
 *
 * @param string $context
 *   Context id, collection pid, cpd pid, or namespace prefix.
 *
 * @return array $pid_and_dsid
 *   Object pid, and which datastream to use.
 */
function islandora_item_nominations_get_key_image($context = FALSE, $namespace = FALSE) {
  module_load_include('inc', 'islandora_item_nominations', 'includes/utilities');
  $keys = get_nominated_for_context($context, $namespace, 'LOAD');
  $essential_info = array();
  foreach ($keys as $k => $v) {
    $essential_info[] = $v;
  }
  return retrieval_helper($essential_info);
}

/**
 *  Randomly picks a key image, return metadata and path to image.
 *
 *  @param array $keys
 *   Array of key images to potentially display.
 *
 *  @return array $return
 *    Array of metadata and path to object datastream.
 */
function retrieval_helper($keys) {
  module_load_include('inc', 'islandora_item_nominations', 'includes/utilities');
  if (count($keys) >=1) {
    $count = (count($keys) - 1);
    //Picks a random image from the pool.
    $which = $keys[rand(0, $count)];
    $pid = $which['pid'];
    $dsid = $which['dsid'];
    $path  = "/islandora/object/$pid/datastream/$dsid/view";
    $return = array(
      'meta' => get_image_metadata(islandora_object_load($pid)),
      'path' => $path,
    );
    return $return;
  }
}

/**
 *  Implements hook_preprocess_TEMPLATE_ID().
 *    Purpose is to pass in images and metadata
 */
function islandora_item_nominations_preprocess_islandora_basic_collection_grid(&$variables) {
  if (current_path() == 'islandora/object/islandora:root') {
    // load a background image and metadata for the root collection
    $key_image_and_meta = islandora_item_nominations_get_key_image('front');
  }
  else {
    $key_image_and_meta = islandora_item_nominations_get_key_image('collection', $variables['islandora_object']->id);
  }
  $variables['key_image'] = $key_image_and_meta;
}

/**
 *  Implements template_preprocess_hook().
 */
function islandora_item_nominations_preprocess_islandora_namespace_homepage(&$variables, $hook) {
  $ns = $variables['nsHome']['namespace'].'-';
  $key = islandora_item_nominations_get_key_image('namespace', $ns);
  if(isset($key)) {
    $variables['nsHome']['key_image'] = $key;
  }
}

/**
 * Implements template_preprocess_hook().
 */
function islandora_item_nominations_preprocess_page(&$variables) {
  if(drupal_is_front_page()){
    $key = islandora_item_nominations_get_key_image('front');
    if (isset($key)) {
      $variables['page']['key_image']['meta_link'] = $key;
      $path = $key['path'];
      $markup = "<div class='parallax-mirror HelloWill'>
      <img class='parallax-slider' src='$path'></img>";

      foreach($key['meta'] as $meta) {
        $markup .= "<div class='parallax-meta'>$meta</div>";
      }
      $markup .= '</div>';
      $variables['page']['content']['key_image']['#markup'] = $markup;
    }
  }
}
