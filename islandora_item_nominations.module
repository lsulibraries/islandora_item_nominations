<?php

/**
 * @file Islandora Item Nominations module.
 */

/**
 * Implements hook_menu().
 */
function islandora_item_nominations_menu() {
  $items = array();
  $items['admin/islandora/tools/nominations'] = array(
    'title' => t('Front-page image pool'),
    'description' => t('Choose which items to include on the front page rotation'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_item_nominations_front_form'),
    'access arguments' => array('Administrate front page image pool'),
    'file' => 'includes/front.form.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implements hook_form_FORM_ID_menu().
 */
function islandora_item_nominations_form_islandora_object_properties_form_alter(&$form, &$form_state) {
  module_load_include('inc', 'islandora_item_nominations', 'includes/utilities');
  $object = $form_state['object'];
  if ($form['pid']['#value'] == 'islandora:sp_remote_resource_collection') {
    return;
  }
  $checkbox = array(
    '#type' => 'checkbox',
    '#title' => t('Nominate as featured item of collection'),
    '#description' => t('Adds either the JPG or TN (prefers JPG) for this object to a pool of featured items'),
    '#default_value' => is_nominated($form['pid']['#value']) ? TRUE : FALSE,
  );
  $dsid = '';
  foreach ($object as $datastream) {
    if ($datastream->id == 'JPG') {
      $form['nominate'] = $checkbox;
    }
    else {
      $form['nominate'] = $checkbox;
    }
  }
  array_unshift($form['#submit'], 'islandora_item_nominations_submit_handler');
return $form;
}

/**
 * Implements hook_islandora_basic_collection_build_manage_object.
 */
function islandora_item_nominations_islandora_basic_collection_build_manage_object($form_state, $object) {
  module_load_include('inc', 'islandora_item_nominations', 'includes/collection.form');
  $form_state['manage_collection_object']['nominate'] = array(
    '#id' => 'nominate-children',
    '#group' => 'manage_collection_object',
    '#access' => TRUE,
    '#type' => 'fieldset',
    '#title' => t('Nominated members in this collection'),
    'form' => drupal_get_form('islandora_item_nominations_collection_form', $object),
  );
  return $form_state;
}

/**
 * Implements hook_form_FORM_ID().
 * Manage namespace homepage
 */
function islandora_item_nominations_form_admin_form_alter(&$form, &$form_state) {
  $params = current_path();
  $namespace = explode('/', $params);
  $ns = $namespace[0] . '-';
  $results = db_select('islandora_item_nominations', 'n')
    ->fields('n')
    ->condition('pid', $ns.'%', 'LIKE')
    ->execute()
    ->fetchAll();
  $options = array();
  foreach ($results as $result) {
    $options[$result->id] = (array) $result;
    $options[$result->id]['pid'] = l($result->pid, 'islandora/object/' . $result->pid);
  }
  $form['front'] = array(
    '#type' => 'fieldset',
    '#title' => t('Choose items, to give namespace specific context'),
  );
  $headers = array(
    'pid' => array('data' => t('Item pid'), 'field' => 'n.pid'),
    'dsid' => array('data' => t('Datastream'), 'field' => 'n.dsid'),
    'context_id' => array('data' => t('Context Id (pid or namespace)'), 'field' => 'n.context_id'),
    'context_type' => array('data' => t('Type of Context'), 'field' => 'n.context_type'),
    'front' => array('data' => t('Show on frontpage'), 'field' => 'n.front'),
  );
  $form['table'] = array(
    '#type' => 'tableselect',
    '#title' => t('Available items Pool'),
    '#description' => t('Choose items to be featured on the institution/sub-institution homepage.'),
    '#header' => $headers,
    '#options' => $options,
    '#empty' => t('No items added yet, to nominate visit islandora/object/%object:pid%/manage/properties'),
  );
  array_unshift($form['#submit'], 'islandora_namespace_context_add');
  return $form;
}

function islandora_namespace_context_add(&$form, &$form_state){
  foreach ($form_state['input']['table'] as $id) {
    db_update('islandora_item_nominations')
      ->condition('id',$id)
      ->fields(array(
        'context_type' => 'namespace',
        'context_id' => $form['ns']['#value']. '-'
      ))
      ->execute();
  }
}

/**
 * Return the key image for a given context.
 *
 * @param string $context
 *   Context id, collection pid, cpd pid, or namespace prefix.
 *
 * @return array $pid_and_dsid
 *   Object pid, and which datastream to use.
 */
function islandora_item_nominations_get_key_image($context) {
  $qargs = [':context' => $context];
  $qtext = "SELECT * FROM islandora_item_nominations WHERE context_type = :context";
  $potential_key = db_query($qtext, $qargs);
    if ($potential_key->rowCount() >= 1) {
    $potential_key->fetchAll();
    $which = rand(0, $potential_key->rowCount());
  }
  dpm($potential_key->rowCount());
  //add conditional to check for ns_homepage.
  $pid_and_dsid = array('pid', 'dsid');
  return $pid_and_dsid;
}

/**
 * Return the key image for a given context.
 *
 * @return array $pool
 *   Set of db records, images available for frontpage
 */
 function islandora_item_nominations_get_frontpage_pool() {
  $potential_keys = db_query('SELECT * FROM islandora_item_nominations WHERE front = 1');
  $count = $potential_keys->rowCount();
  $which = rand(1, $potential_keys->rowCount());
  $pool = $potential_keys->fetchAll();
  $pid = $pool[$which]->pid;
  $dsid = $pool[$which]->dsid;
  $obj = islandora_object_load($pid);
  $image = $obj[$dsid];
  $image->getContent('/tmp/image.file');
}

/**
 * Called when a new item is chosen for the given context.
 *
 * @param string $pid
 *   Object pid of new object.
 * @param string $context
 *   Context id, collection pid, cpd pid, or namespace prefix.
 *
 * @return array $pid_and_dsid
 */
function islandora_item_nominations_unset_key($pid, $context) {
  //set some field to NULL (see readme line 57).
  $meta = islandora_item_nominations_get_image_metadata($pid);
}

/**
 * Update db record for a pid setting value for a context.
 *
 * @param string $pid
 *   Object pid of new object.
 * @param string $context
 *   Context id, collection pid, cpd pid, or namespace prefix.
 * @param string $context_id
 *   Context id, collection pid, cpd pid, or namespace prefix.
 *
 * @return array $pid_and_dsid
 *   Object pid, and which datastream to use.
 */
function islandora_item_nominations_set_key($pid, $context, $context_id) {
  //
}

function islandora_item_nominations_get_image_metadata($pid) {
  $obj = islandora_object_load($pid);
  $mods = simplexml_load_string($obj['MODS']);
  return array(
    'title' => $title,
    'description' => $description,
    'creator' => $creator,
    'date_created' => $date_created,
    'cmodel' => $cmodel
  );
}

function where_ami() {
  if (current_path() == '') {
    dpm('<front>ish');
    islandora_item_nominations_get_frontpage_pool();
    //islandora_item_nominations_get_key_image('front');
  }
  if (current_path() == 'lsu') {
    //need namespace list
    dpm('namespace');
    islandora_item_nominations_get_key_image('lsu-');
  }
  if (current_path() == 'islandora/object/islandora:root') {
    dpm('root');
    // foreach ($collection_grid_member as $collection) {
    //   islandora_item_nominations_get_key_image($collection_pid);
    // }
    //load up each collection in the grid's key image
  }
  if (preg_match('%islandora/object/(.*):collection%', current_path())) {
    if(!preg_match('%collection/%', current_path())){
      dpm('collection');
      $path = explode('/', current_path());
      $path[2];
      islandora_item_nominations_get_key_image($path[2]);
    }
  }

}

where_ami();
